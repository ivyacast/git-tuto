git add (agrega archivos al stage area)
git add -A (agrega todos los archivos al stage area)

git commit
git commit -m "something"
git commit -a (comitea todos los archivos que estan en staged area)
git commit -am "something"
*Stash
git stash
git stash -u (agrega al stash inclusive los archivos no trackeados en el stage index)
git stash list
git stash pop
git stash push -m 'MESSAGE'

|=========== Clean ===========|
1. Eliminar archivos que no estan rastreados por git (untracked files)
git clean -d -n (-d permite borrar directorios, -n permite ver los archivos antes de borrarlos)
git clean -d -f ( -f fuerza el borrado)

|=========== Branch ===========|
git branch (lista las branch)
git branch -a (lista branch locales y remotas)
git branch nombre_rama (crea rama)
git branch -d nombre_rama (borra rama)

git checkout nombre_rama (para saltar a una rama)
git checkout -b nombre_rama (cambia a la rama, y si no existe la crea)
*TAG
git tag nombre_tag (

|=========== Remote ===========|

git remote (muestra las ramas remotas)
git remote -v (muestra las ramas y su URL)
git remote add <name> <url>

|=========== Push ===========|

 -- Pushing to Git remotes
  The git push command is used to write to a remote repository.
  git push <remote-name> <branch-name>
  example: git push origin MY_BRANCH

|=========== Fetch ===========|
git fetch remote_name (normalmente es remote_name = origin, y obtiene y actualiza todas las ramas remotas)
git fetch -ap (actualiza las ramas y elimina las ramas que no se estén usando o no existan)

|=========== Alias de git ===========|
Agregar ficheros con la terminación git-[nombre_comando]
Dentro de cada fichero colocar la lógica del comando git.
Ejemplo: 
			fichero     Contenido
			-------    ------------
			git-st ---> git status
El ficher deber estar en una carpeta referenciada en el PATH (i.e PATH=${PATH}:~/bin

|=========== Buenas practicas: git ignore global ===========|
touch ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global

|=========== Estrategias de integración ===========|
 - merge
 	+ Trae los cambios de la rama que queremos mergear y genera un commit al histórico.
 	git merge nombre_rama_que_traeremos_para_merge
	
	git merge --no-commit --no-ff <branch> // Realiza un merge y comitea asi sea un fast forward (FF es una manera en la cual una rama hija no diverge del padre                                                     sino que es lineal). Lo utilizo para generar un historico al mas minimo detalle.
						
	
	

 - rebase
 	+ Coloca todos los commits de la rama actual por encima de la rama que traeremos para el rebase.
	+ Tener cuidado de hacer rebase a la rama master ya que puede generar un push --force lo cual no es
	  recomendable ya que reconfigura todo el histórico. Al suceder esto puede afectar a los compañeros.
 	git rebase nombre_rama_que_traeremos_para_rebase
	
 - Squash
 	+ Junta commits y toma la fecha del último. Recomendable juntar commits que por sí mismos no significan mucho pero sí en conjunto.
	+ Al realizar un squash se debe realizar un push --force, por lo cual podemos eliminar cambios que se
	  haya hecho en la rama remota por algunos de nuestros compañeros.
	+ Tener en cuenta que al momento de realizar el squash debemos cambiar el valor 'pick' por 'squash' o 's' y dejar el primer commit como el commit base que va a representar la agrupacion de todos los commits que se hizo con squash.
	git rebase -i HEAD~[numero_commits_hacia_atrás]
	
	
|=========== Pull ===========|
git pull origin next // Merge por defecto (merge la rama next que esta en el remoto origin hacia la rama local actual)

git pull --no-ff --no-commit origin REMOTE_BRANCH_TO_PULL_INTO_LOCAL



 CASO: La rama local y remote no están sincronizadas. Tenemos cambios en stage de la rama local y al
 	hacer un push nos alerta que hay cambios que debemos traer (pull)
 + Por defecto el siguiente comando hace un git pull pero con merge y puede generar un commit.
 git pull origin nombre_rama
 
 + Generalmente no origina commits extra como el caso anterior. Si tenemos cambios en stage lo que hace es:
 	1. Saca los cambios que tenemos en el stage y los "guarda"
	2. Trae los cambios de la rama remota
	3. Vuelve a colocar nuestros cambios del paso 1
 
 git pull origin nombre_rama --rebase
 
 git pull --rebase --autostash
 
|=========== Deshaciendo errores al comitear ===========|
 + Git revert deshace un cambio pero genera un commit de la reversión
 git revert [sha_del_commit]
 
 + Deshacer un merge request con revert
 git revert -m 1 <SHA_MERGE_COMMIT>
 
 + Deshacer el commit y modifica el histórico, pero no genera ningún commit por la reversión.
 
 git reset [commit] --mixed  => este comando lo que hace es deshacer todos los cambios hasta el commit que deseamos.
 								Y por el --mixed nos deja esos cambios deshechos en el working tree.
 ejemplo:
 	git reset HEAD~1 --mixed

 + Descarta todos los cambios que estén, o no, en stage area.
 
 git reset --hard
 
 Si le asigno una referencia a un commit
 
 git reset --hard commit_id => Aqui lo que pasaría es que descartará ese commit (modificando el histórico) así como
 						       también descata los cambios que esten, o no, en el stage area.
 
 + Situaciones en las que queremos modificar el último commit, ya sea agregando nuevos cambios (staging area)
 	o modificando el mensaje del último commit
 
 git commit --amend --no-edit => Si quitamos el no-edit entonces podriamos modificar el mensaje.
 								 En caso no lo quitemos nos agrega todos los cambios de stage área al ultimo commit
								 sin agregar un commit extra en el histórico-
								 
 + Lo que lograremos aqui es copiar un commit (o un rango, ver desc). de una rama hacia otra.
  El flujo sería:
  1. Rama actual: elijo el commit(sha) o commits que deseo coger.
  2. hago un checkout hacia la rama objetivo (i.e master)
  3. Ya ubicados en la rama objetivo realizo el cherry.pick
  git cherry-pick [sha_commit]
 
* OTROS
	git log --grep $string
	git log --oneline --graph --decorate
	git blame [Nombre_Archivo]
 
  
